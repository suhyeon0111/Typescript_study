import React, { useEffect, useState } from "react";
import Calendar from "react-calendar";
import "react-calendar/dist/Calendar.css";
import "../../styles/Calendar.css";

import Logo from '../../components/common/Logo';
import ModalTodo from "../../components/Modal/ModalTodo";
import { fetchSchedulesByMonth } from "../../api/schedule";

type Value = Date;

export default function CalendarPage() {
    const [schedules, setSchedules] = useState<string[]>([]);  // Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
    const [date, setDate] = useState<Value>(new Date());
    const [isModalOpen, setIsModalOpen] = useState<boolean>(false);  // Î™®Îã¨Ï∞Ω Ïó¥Î¶º Ïó¨Î∂Ä ÌôïÏù∏

    // Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞ Î∞õÏïÑÏò¥
    useEffect(() => {
        const getData = async () => {
            try {
                const fetchData = await fetchSchedulesByMonth("2025-05");
                setSchedules(fetchData);
                console.log("get schedule >>>> ", fetchData);

            } catch (error) {
                alert("ÎÇ†Ïßú Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®");
                console.error("get schedule error>>>>> ", error);
            }
        };
        getData();
    }, []);

    // ÎÇ†ÏßúÎ•º 'YYYY-MM-DD' ÌòïÏãùÏúºÎ°ú Ìè¨Îß∑
    const formatDate = (date: Date) => {
        return date.toISOString().split('T')[0];
    };

    // ÏùºÏ†ï ÌÅ¥Î¶≠ Ìï®Ïàò
    const dayClickShowModalHandler = () => {
        setIsModalOpen(true);
        setDate(date);
        console.log("click day>>> ", date);
    }

    return (
        <>
            <Logo />
            <div className="calendarContainer">
                <Calendar
                    value={date}
                    selectRange={false}
                    onClickDay={dayClickShowModalHandler}
                    tileContent={({ date, view }) => {
                        const dateStr = formatDate(date);
                        const hasSchedule = schedules.includes(dateStr);  // Ìï¥Îãπ ÎÇ†Ïßú Ìè¨Ìï® Ï≤¥ÌÅ¨ Ïó¨Î∂Ä

                        return view === 'month' && hasSchedule ? (
                            <div className="schedule-mark">
                                <p className="schedule-p">üìå</p>
                            </div>
                        ) : null;
                    }}
                />
                {isModalOpen && <ModalTodo onClose={() => setIsModalOpen(false)} onDay={date} />}
            </div>
        </>
    )
}